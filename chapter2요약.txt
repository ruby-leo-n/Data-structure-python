파이썬은 인터프리터 방식을 사용한다
식별자란 어떤 대상을 유일하게 구별할 수 있는 이름을 말한다.
프로그래밍 언어들마다 이미 특별한 의미가 있는 이름들이 있다.
이것을 예약어 또는 키워드라 한다.
변수는 데이터를 담는 공간으로 저장되는 데이터는 마음대로 바꿀 수 있다.
C와 같은 컴파일 형식의 언어는 변수를 사용하기 전에 반드시 변수의 자료형을 앞에 선언해준다.
왜냐하면 변수를 선언하는 것은 변수를 저장하기 위해 메모리 공간을 컴파일러가 미리 확보하도록 하는 것이다.
연산자 =은 같다는 의미가 아니라 오른쪽 값을 왼쪽 변수에 대입하라는 대입 연산자이다.
변수는 다른 객체를 참조하는 참조자 또는 포인터의 역할을 한다.
어떤 객체에 대한 모든 참조가 없어지면 객체는 자동으로 삭제된다.
아무런 값을 참조하지 않는 변수도 존재하는데 이때, None객체를 사용한다.
연산자/는 실수의 나눗셈을 의미하고 연산자//는 나머지를 제거한 정수 연산을 나타낸다.
이항 연산자 **가 새롭게 추가되었다. 2**5는 2^5를 나타낸다
is와 is not연산자는 변수에 저장된 값을 비교하기 위한 것이다.
참조하는 객체의 내용을 비교하는게 아님을 유의해라
파이썬에서는 키보드의 입력을 받기 위해서 input()함수를 제공한다.
input()함수는 하나의 문자열을 반환하고 사용자에게 어떤 정보를 기다린다는 것을 표시해주기 위해 사용된다.
input()함수가 반환하는 값은 항상 문자열이다. 만약 사용자로 부터 정수나 실수값을 입력받고 싶다면 int()나 float()와 같은 형 변환 함수를 사용해서 변환하면 된다.
print()함수는 호출할 때 마다 라인피드가 발생하는데 내용을 모두 출력한 다음 엔터를 입력해 다음 출력은 다음 줄에서 시작하도록 하는 것이다.
라인 피드가 발생하지 않게 하도록 하려면 키워드 인수인 end를 사용하면 된다.
파이썬에서 탭이나 따옴표 같은 특수문자를 표현하기 위해 어스케이프 시퀀스를 사용한다.
\" double quote(") \ single quote(') \t tab 
range()란 함수를 사용하여 시작값과 종료값, 한번에 증가되는 값을 지정할 수 있게 되어 있다
파이썬에서 반복문을 사용할 때 range() 없이도 컬렉션 자료형에 대해 for문을 사용할 수 있다.
문자열에 대해서도 가능하다
집합에 대해서도 가능하다
딕셔너리에 대해서도 가능하다
두개의 문자열에 관해서 +연사자를 이용하여 연결할 수도 있다
문자열의 각 문자들을 인덱스 연산자를 이용해 접근할 수 있는데 이는 음수와 양수 모두 지원한다.
-1은 인덱스 연산자에서 문자열의 마지막을 뜻한다.
문자열 반복 연산자를 이용해 문자열을 반복할 수 있다.
포맷을 정의할 때 여러 개의 필드가 필요하면 위의 코드와 같이 튜플로 묶어서 제공하면 된다.
문자열 클래스는 lower()나 upper()를 포함하여 다양한 메소드를 제공한다
strip 메소드는 공백이나 선택된 문자를 문자열에서 제거한다.
split 메소드는 공백이나 주어진 문자를 기준으로 문자열을 분리한다. 문자열의 리스트를 반환한다.
파이썬의 리스트는 클래스로 구현되어 있으며 다양한 메소드를 지원한다.
append()는 항목을 리스트의 맨뒤에 추가한다.
insert()는 주어진 위치에 항목을 삽입한다.
튜플은 리스트와 동일하지만 크기나 값을 변경할 수 없는 점이 리스트와 다르다
파이썬은 키와 관련된 값으로 이루어진 항목들의 집합을 위한 사전구조를 지원한다.
딕셔너리는 탐색을 위한 자료구조이다
딕셔너리에 여러 항목을 추가할 때 update란 메소드를 사용한다.
딕셔너리에서 in연산자를 사용해 어떤 키가 맵에 있는지를 검사할 수도 있다.
in 연산자는 리스트나 튜플에서 순차탐색을 지원하고 딕셔너리에서 해싱을 사용한다.
맵에 있는 모든 키와 값을 각각 출력하기 위해 keys(), values() 메소드를 사용한다.
집합은 리스트와 비슷한 개념이지만 원소의 중복을 허용하지 않고 원소들 사이에 순서가 없다는 점이 리스트와 다르다.
파이썬은 set과 frozenset의 두가지 집합형을 제공하는데 frozenset은 내용을 변경할 수 없는 set이다.
파이썬에서 공집합을 만들기 위해 s1={} 문장을 사용할 수 없다.
왜냐하면 윗 문장은 집합이 아니라 공백 딕셔너리를 만드는 문장이다.
딕셔너리에서도 {}를 사용했던 것에 유의하라
공집합을 만들기 위해서는 s1=set()을 사용해야한다
함수는 내장함수와 사용자 정의 함수가 있다.
함수는 함수의 헤더와 함수 몸체부로 이루어진다.
함수를 호출할 때 함수에서 필요한 정보를 전달하는데 이러한 값을 인수라고 한다.
인수는 함수를 정의할 때 만들었던 매개변수로 전달된다.
함수에서 처리된 결과를 되돌려주기 위해 return을 사용한다.
파이썬은 c와 달리 튜플을 사용해서 return에 여러개의 값을 반환할 수 있다.
또한 여러개의 값을 튜플을 사용해서 하나로 묶은 뒤 반환받을 수 있다.
디폴트 인수는 함수의 매개변수에 기본 값을 부여하는 기능으로 함수 호출시 인수가 주어지면 그 인수를 사용하고, 만약 인수가 생략되면 기본 값을 사용한다.
키워드 인수 함수의 매개변수 이름에 직접값을 지정하여 함수를 호출하는 것을 말한다.
키워드 인수를 사용하면 인수의 순서를 바꾸어 함수를 호출할 수도 있다.
print()에서 end 매개변수를 지정하는 것이 키워드 인수의 대표적인 예시이다.
end를 지정하지 않으면 기본값인 \n이 출력되어 라인피드가 발생하는데 end를 사용하면 end로 설정된 문자를 뒤에 출력한다.
변수는 지역변수와 전역변수로 구분된다.
지역변수는 소스파일 맨 꼭대기 레벨에서 생성된 변수에 해당되며 프로그램의 어디에서나 사용할 수 있다.
전역변수는 함수나 클래스의 메소드 안에서 생성된 변수들로 그 안에서만 사용할 수 있다.
만약 어떤 전역변수가 함수 내에서 사용된 것이 아니라 값이 변경되어지면 어떻게 될까?
파이썬에서는 변수에 값을 저장하면 새로운 변수가 생성되는데 따라서 함수 내에서 변경된 전역변수는 전역변수가 아니라 새로운 지역변수가 되는 것이다.
함수 내에서 어떤 변수를 전역변수라고 지정하는 방법은 지정하고자 하는 변수 앞에 global이란 키워드를 사용하는 것이다.
import 키워드를 이용해 다른 파일에 작성된 내용을 가져올 수 있다.
포함된 모듈을 사용하려면 항상 모듈 이름을 통해 호출해야 해서 번거로운데 이름 공간을 알면 더 편하게 사용할 수 있다.
파이썬에서 모든 모듈은 자신의 이름공간을 이루고 있는데 같은 이름공간 안에서는 모든 식별자를 자유롭게 사용할 수 있다.
이름 공간이 필요한 이유는 프로그래밍을 수행하다보면 모든 변수이름과 함수이름을 정하는 것이 중요한데 이들 모두를 겹치지 않게 정하는 것은 사실상 불가능하기 때문이다.
파이썬 모듈이라고 하면 독자적인 이름공간을 가진다고 생각할때 한 파이썬 모듈에서 같은 이름을 가진 함수를 만들 수 없다. 하지만 이름공간을 따로 갖고 있는 다른 파이썬 모듈을 만든다면 같은 이름의 함수를 만들어도 상관이 없다. 이름공간이 분리되어 있기 때문이다.
모듈을 import할 때 어떻게 하느냐에 따라 사용할 식별자가 어느 모듈에 속하는지를 반드시 명시해야하는 경우도 있고 아닌 경우도 있다.
import 모듈명 같은 경우 사용할 식별자가 어느 모듈의 식별자인지 명시해야 하지만 from 모듈명 import 식별자 같은 경우 사용할 식별자를 모듈을 import할때 같이 정의했으므로 식별자를 명시해서 사용하지 않아도 된다.
또한 import하는 모든 모듈의 식별자를 모듈 표시 없이 사용할 수 있도록 하려면 다음과 같이 from 모듈명 import *을 사용해주면 된다.
이 방법은 만약 많은 모듈을 사용해야 하고 사용하는 모듈 안에서 중복된 식별자가 존재할 수 있다면 문제가 있다. 이경우 실별자를 선택적으로 사용할 수 있도록 하는 것이 바람직하다.
파이썬은 순서시향 프로그래밍과 객체지향 프로그래밍기법을 모두 사용한다.
객체지향 기법은 클래스와 객체가 중심이 되는 프로그래밍 전략이다. 
클래스는 객체를 찍어내는 틀이고 객체는 변수와 같이 자료를 저장하는 프로그램의 구성요소이다.
파이썬에서는 모든 자료가 클래스로부터 만들어지는 객체임을 반드시 기억하라. 파이썬에서는 정수나 실수도 클래스로 되어있다.
클래스는 객체를 정의하는 틀, 설계도이다.
클래스는 속성을 나타내는 멤버변수와 동작을 나타내는 멤버함수(이하 메소드)로 이루어진다.
모든 클래스는 생성자라고 불리는 특별한 멤버 함수를 정의해야한다.
생성자는 객체가 생성될 때 마다 자동으로 호출되는 함수인데 객체에서 사용할 데이터를 정의하고 초기화한다.
클래스 내에서 멤버변수는 self.으로 참조된다.
어떤 메소드가 호출되면 파이썬은 self가 자동으로 메소드를 호출한 객체를 참조하도록 처리한다.
파이썬에서는 사용자가 정의한 클래스의 객체들에게 표준연산을 적용할 수 있도록 연산자 중복 (이하 연산자 오버로딩) 함수를 허용한다. 
다음과 같이 특별한 메소드를 클래스에서 정의하면 프로그래밍이 훨씬 편해진다.
print()에서 객체를 바로 출력할 수 있도록 하는 것도 가능하다 이것은 객체를 문자열로 변환하는 __str__메소드를 정의하면 된다.
만약 인수 값이 같은 객체를 같다라고 정의할 경우 __eq__라는 메소드를 이용하여 비교할 수 있다.
상속은 기존에 정의된 클래스로부터 멤버를 추가해 새로운 클래스를 간편하게 만드는 방법이다.
이때 상속해주는 클래스를 기본 클래스 혹은 부모 클래스라고 하고 상속받는 클래스를 파생 클래스 혹은 자식 클래스라고 한다.
자식클래스에서 부모클래스를 부르는 함수가 super()인데, 생성자에서 부모 클래스의 생성자를 호출하기 위해 이 함수를 사용한다.
부모 클래스에서 이미 정의되어 있지만 자식에서 내용이 변경되어 다시 정의하는데 이것을 재정의(이하 오버라이딩)이라고 한다.
즉 부모와 자식 클래스에서 모두 같은 이름의 함수가 구현되어 있다.














