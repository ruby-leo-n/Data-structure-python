# 파이썬을 이용한 그래프의 인접 리스트 표현
# 리스트와 튜플, 딕셔너리, 집합 등 인접 리스트를 표현할 수 있는 방법은 매우 다양하다.

# 딕셔너리를 이용한 표현
# 그래프는 선형 자료구조가 아니기 때문에 정점들의 순서가 의미없다.
# 따라서 리스트가 아니라 집합이나 딕셔너리와 같은 다른 방법들을 이용해 표현할 수도 있다.

graph1 = {"A": ["B", "C"],
          "B": ["A", "D"],
          "C": ["A", "D", "E"],
          "D": ["B", "C", "F"],
          "E": ["C", "G", "H"],
          "F": ["D"],
          "G": ["E", "H"],
          "H": ["E", "G"]}

edge1 = graph1["C"]  # edge는 노드C의 인접 리스트


# 사실 인접 리스트도 반드시 리스트로 이루어질 필요는 없다. 의미적으로는 인접 정점 리스트보다는 인접 정점 집합이 더 정확하다.
# 왜냐하면 인접 정점들 사이에는 순서가 필요하지 않고 단지 어떤 정점들이 인접해 있는지만 중요하기 때문이다.
# 따라서 집합으로 표현할 수 있다.

graph2 = {"A": set(["B", "C"]),
          "B": set(["A", "D"]),
          "C": set(["A", "D", "E"]),
          "D": set(["B", "C", "F"]),
          "E": set(["C", "G", "H"]),
          "F": set(["D"]),
          "G": set(["E", "H"]),
          "H": set(["E", "G"])}

# graph2["C"]의 원소는 "A","D","E"가 될 것이다.
# 집합에서도 in 연산자를 사용할 수 있으므로 다음과 같이 각 원소를 화면에 출력할 수 있다.

for v in graph2["C"]:
    print(v)
