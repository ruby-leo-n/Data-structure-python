리스트는 항목들이 차례대로 나열되어 있는 선형자료구조이다.
리스트는 항목들 사이에 순서가 있다는 점에서 집합과 다르다.
리스트에서는 원소의 중복에 관한 제한이 없다.
리스트는 항목들이 순서대로 정렬되어 있고 각 항목들은 위치를 가진다.
리스트의 연산에는 다음과 같은 추상형 기능들이 있어야 한다.
1.어떤 위치에 항목을 삽입하거나 삭제한다.
2.리스트가 공백상태인지 검사한다.
3.어떤 위치의 항목을 꺼내지 않고 반환한다.
4.전체의 항목의 개수를 세어 반환한다.
5.리스트를 초기화 한다.
6.리스트에 어떤 항목이 있는지 탐색한다.
7.어떤 위치에 있는 항목을 새로운 항목으로 대치한다.
8.리스트를 어떤 기준으로 다시 정렬한다.
9.두개의 리스트를 병합한다.
10.리스트를 화면에 보기 좋게 출력한다.
11.리스트의 맨 뒤에 새로운 항목을 추가한다.
리스트는 배열구조와 연결된 구조로 구현할 수 있다.
배열 구조는 같은 자료형의 데이터를 한꺼번에 만들 때 사용하는데 대부분의 프로그래밍 언어에서 제공된다.
배열의 항목들에 접근하기 위해 인덱스 연산자를 사용한다.
배열은 모든 항목들이 반드시 메모리에서 연속적인 공간에 위치한다.
항목의 접근 시간복잡도는 O(1)이다.
연결된 구조는 링크를 이용해 다음 항목 위치만을 알고 있다.
항목의 접근 시간복잡도는 O(n)이다.
파이썬 리스트는 C에서와 다르게 선언과 동시에 그 크기가 정해지지 않는다.
또한 C에서는 리스트를 선언할 때 자료형이 명시되어야 한다.
파이썬 리스트는 동적배열의 개념을 이용한다.
추가적인 공간이 필요하면 기존의 메모리를 모두 버리고 더 큰 새로운 메모리를 할당해 사용하는 것이다.
파이썬의 리스트는 용량을 늘릴 수 있어 편리하지만 메모리가 낭비된다.
이에 비해, 튜플은 용량을 변경할 수 없어 메모리 측면에서 더 효율적이다.
파이썬 리스트의 append()연산은 시간복잡도 O(1)로 볼 수 있다.
파이썬 리스트의 insert()연산은 시간복잡도 O(n)로 볼 수 있다.
파이썬 리스트의 pop()연산은 시간복잡도 O(n)로 볼 수 있다. 후단 삽입이나 삭제는 효율적이지만 중간이나 처음 값을 삽입 삭제하는 경우 비효율적이다.
자료구조를 구현하는 가장 좋은 방법은 클래스이다. 예를 들어 리스트의 adt를 클래스로 구현하면 파이썬의 리스트와 같이 리스트 객체를 마음대로 사용할 수 있다.
1.필요한 클래스를 선언한다. 
2.전역변수로 선언되었던 데이터를 멤버변수로 클래스에 넣는다. 즉, 생성자로 불리는 __init__()함수에 그 변수를 선언하는 것이다.
3.일반함수로 구현된 자료구조의 연산을 클래스의 메소드로 바꾸어 클래스에 넣는다.
4.클래스의 메소드에서 객체 자신의 데이터를 사용하거나 멤버함수를 호출하기 위해서는 self.을 앞에 넣어준다.
예를 들어, 메소드에서 x=10은 새로운 변수 x를 만드는 것이고, self.x = 10은 클래스의 데이터 x에 값을 할당하는 것이다.
클래스에서 함수를 만들면 함수의 첫번째 매개변수로 self가 추가되어야 하는 것과 클래스 멤버를 사용할 때 self.을 앞에 넣어야 한다는 것만 명심하면 된다.
컴퓨터에서 파일을 사용하기 위해서는 먼저 파일을 열어야하는데 open()함수를 사용한다.
파일객체는 사용이 끝나면 반드시 닫아야 하는데 이를 위해, close()함수를 사용한다.
파일 객체에서 readlines() 메소드를 이용해 파일 내의 모든 문자열을 한꺼번에 읽을 수 있다.
각 문자열의 마지막에 '\n'이 있는 경우 이를 제거하기 위해 문자열 클래스의 rstrip()함수를 사용하였다.
파일 객체의 write()함수를 이용해 각 항목을 순서대로 파일에 저장하였다.
집합이란 원소의 중복을 허용하지 않으며 원소들 사이에 순서가 없다는 면에서 리스트와 다르다.
원소들이 어떤 위치를 가지지도 않고 원소들을 일렬로 나열하는 의미도 적용되기 어렵기 때문에 선형 자료구조로 볼 수 없다.
in 연산자는 찾고자 하는게 어떤 객체에 있는지 검사하고 true와 false를 반환한다.
